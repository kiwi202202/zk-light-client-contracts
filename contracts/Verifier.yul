
        object "plonk_verifier" {
            code {
                function allocate(size) -> ptr {
                    ptr := mload(0x40)
                    if eq(ptr, 0) { ptr := 0x60 }
                    mstore(0x40, add(ptr, size))
                }
                let size := datasize("Runtime")
                let offset := allocate(size)
                datacopy(offset, dataoffset("Runtime"), size)
                return(offset, size)
            }
            object "Runtime" {
                code {
                    let success:bool := true
                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
                    function validate_ec_point(x, y) -> valid:bool {
                        {
                            let x_lt_p:bool := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_lt_p:bool := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            valid := and(x_lt_p, y_lt_p)
                        }
                        {
                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let is_affine:bool := eq(x_cube_plus_3, y_square)
                            valid := and(valid, is_affine)
                        }
                    }
                    mstore(0x20, mod(calldataload(0x0), f_q))
mstore(0x40, mod(calldataload(0x20), f_q))
mstore(0x60, mod(calldataload(0x40), f_q))
mstore(0x80, mod(calldataload(0x60), f_q))
mstore(0xa0, mod(calldataload(0x80), f_q))
mstore(0xc0, mod(calldataload(0xa0), f_q))
mstore(0xe0, mod(calldataload(0xc0), f_q))
mstore(0x100, mod(calldataload(0xe0), f_q))
mstore(0x120, mod(calldataload(0x100), f_q))
mstore(0x140, mod(calldataload(0x120), f_q))
mstore(0x160, mod(calldataload(0x140), f_q))
mstore(0x180, mod(calldataload(0x160), f_q))
mstore(0x1a0, mod(calldataload(0x180), f_q))
mstore(0x1c0, mod(calldataload(0x1a0), f_q))
mstore(0x1e0, mod(calldataload(0x1c0), f_q))
mstore(0x200, mod(calldataload(0x1e0), f_q))
mstore(0x220, mod(calldataload(0x200), f_q))
mstore(0x240, mod(calldataload(0x220), f_q))
mstore(0x260, mod(calldataload(0x240), f_q))
mstore(0x280, mod(calldataload(0x260), f_q))
mstore(0x2a0, mod(calldataload(0x280), f_q))
mstore(0x2c0, mod(calldataload(0x2a0), f_q))
mstore(0x2e0, mod(calldataload(0x2c0), f_q))
mstore(0x300, mod(calldataload(0x2e0), f_q))
mstore(0x0, 16836478078805656894436611506097408503144393385444493117249337270172170952063)

        {
            let x := calldataload(0x300)
            mstore(0x320, x)
            let y := calldataload(0x320)
            mstore(0x340, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x360, keccak256(0x0, 864))
{
            let hash := mload(0x360)
            mstore(0x380, mod(hash, f_q))
            mstore(0x3a0, hash)
        }

        {
            let x := calldataload(0x340)
            mstore(0x3c0, x)
            let y := calldataload(0x360)
            mstore(0x3e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x380)
            mstore(0x400, x)
            let y := calldataload(0x3a0)
            mstore(0x420, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x440, keccak256(0x3a0, 160))
{
            let hash := mload(0x440)
            mstore(0x460, mod(hash, f_q))
            mstore(0x480, hash)
        }
mstore8(1184, 1)
mstore(0x4a0, keccak256(0x480, 33))
{
            let hash := mload(0x4a0)
            mstore(0x4c0, mod(hash, f_q))
            mstore(0x4e0, hash)
        }

        {
            let x := calldataload(0x3c0)
            mstore(0x500, x)
            let y := calldataload(0x3e0)
            mstore(0x520, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x400)
            mstore(0x540, x)
            let y := calldataload(0x420)
            mstore(0x560, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x440)
            mstore(0x580, x)
            let y := calldataload(0x460)
            mstore(0x5a0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x5c0, keccak256(0x4e0, 224))
{
            let hash := mload(0x5c0)
            mstore(0x5e0, mod(hash, f_q))
            mstore(0x600, hash)
        }

        {
            let x := calldataload(0x480)
            mstore(0x620, x)
            let y := calldataload(0x4a0)
            mstore(0x640, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x4c0)
            mstore(0x660, x)
            let y := calldataload(0x4e0)
            mstore(0x680, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x500)
            mstore(0x6a0, x)
            let y := calldataload(0x520)
            mstore(0x6c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x540)
            mstore(0x6e0, x)
            let y := calldataload(0x560)
            mstore(0x700, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x720, keccak256(0x600, 288))
{
            let hash := mload(0x720)
            mstore(0x740, mod(hash, f_q))
            mstore(0x760, hash)
        }
mstore(0x780, mod(calldataload(0x580), f_q))
mstore(0x7a0, mod(calldataload(0x5a0), f_q))
mstore(0x7c0, mod(calldataload(0x5c0), f_q))
mstore(0x7e0, mod(calldataload(0x5e0), f_q))
mstore(0x800, mod(calldataload(0x600), f_q))
mstore(0x820, mod(calldataload(0x620), f_q))
mstore(0x840, mod(calldataload(0x640), f_q))
mstore(0x860, mod(calldataload(0x660), f_q))
mstore(0x880, mod(calldataload(0x680), f_q))
mstore(0x8a0, mod(calldataload(0x6a0), f_q))
mstore(0x8c0, mod(calldataload(0x6c0), f_q))
mstore(0x8e0, mod(calldataload(0x6e0), f_q))
mstore(0x900, mod(calldataload(0x700), f_q))
mstore(0x920, mod(calldataload(0x720), f_q))
mstore(0x940, mod(calldataload(0x740), f_q))
mstore(0x960, mod(calldataload(0x760), f_q))
mstore(0x980, mod(calldataload(0x780), f_q))
mstore(0x9a0, mod(calldataload(0x7a0), f_q))
mstore(0x9c0, mod(calldataload(0x7c0), f_q))
mstore(0x9e0, keccak256(0x760, 640))
{
            let hash := mload(0x9e0)
            mstore(0xa00, mod(hash, f_q))
            mstore(0xa20, hash)
        }
mstore8(2624, 1)
mstore(0xa40, keccak256(0xa20, 33))
{
            let hash := mload(0xa40)
            mstore(0xa60, mod(hash, f_q))
            mstore(0xa80, hash)
        }

        {
            let x := calldataload(0x7e0)
            mstore(0xaa0, x)
            let y := calldataload(0x800)
            mstore(0xac0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xae0, keccak256(0xa80, 96))
{
            let hash := mload(0xae0)
            mstore(0xb00, mod(hash, f_q))
            mstore(0xb20, hash)
        }

        {
            let x := calldataload(0x820)
            mstore(0xb40, x)
            let y := calldataload(0x840)
            mstore(0xb60, y)
            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0x20)
x := add(x, shl(88, mload(0x40)))
x := add(x, shl(176, mload(0x60)))
mstore(2944, x)
let y := mload(0x80)
y := add(y, shl(88, mload(0xa0)))
y := add(y, shl(176, mload(0xc0)))
mstore(2976, y)

            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0xe0)
x := add(x, shl(88, mload(0x100)))
x := add(x, shl(176, mload(0x120)))
mstore(3008, x)
let y := mload(0x140)
y := add(y, shl(88, mload(0x160)))
y := add(y, shl(176, mload(0x180)))
mstore(3040, y)

            success := and(validate_ec_point(x, y), success)
        }
mstore(0xc00, mulmod(mload(0x740), mload(0x740), f_q))
mstore(0xc20, mulmod(mload(0xc00), mload(0xc00), f_q))
mstore(0xc40, mulmod(mload(0xc20), mload(0xc20), f_q))
mstore(0xc60, mulmod(mload(0xc40), mload(0xc40), f_q))
mstore(0xc80, mulmod(mload(0xc60), mload(0xc60), f_q))
mstore(0xca0, mulmod(mload(0xc80), mload(0xc80), f_q))
mstore(0xcc0, mulmod(mload(0xca0), mload(0xca0), f_q))
mstore(0xce0, mulmod(mload(0xcc0), mload(0xcc0), f_q))
mstore(0xd00, mulmod(mload(0xce0), mload(0xce0), f_q))
mstore(0xd20, mulmod(mload(0xd00), mload(0xd00), f_q))
mstore(0xd40, mulmod(mload(0xd20), mload(0xd20), f_q))
mstore(0xd60, mulmod(mload(0xd40), mload(0xd40), f_q))
mstore(0xd80, mulmod(mload(0xd60), mload(0xd60), f_q))
mstore(0xda0, mulmod(mload(0xd80), mload(0xd80), f_q))
mstore(0xdc0, mulmod(mload(0xda0), mload(0xda0), f_q))
mstore(0xde0, mulmod(mload(0xdc0), mload(0xdc0), f_q))
mstore(0xe00, mulmod(mload(0xde0), mload(0xde0), f_q))
mstore(0xe20, mulmod(mload(0xe00), mload(0xe00), f_q))
mstore(0xe40, mulmod(mload(0xe20), mload(0xe20), f_q))
mstore(0xe60, mulmod(mload(0xe40), mload(0xe40), f_q))
mstore(0xe80, mulmod(mload(0xe60), mload(0xe60), f_q))
mstore(0xea0, mulmod(mload(0xe80), mload(0xe80), f_q))
mstore(0xec0, mulmod(mload(0xea0), mload(0xea0), f_q))
mstore(0xee0, mulmod(mload(0xec0), mload(0xec0), f_q))
mstore(0xf00, addmod(mload(0xee0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xf20, mulmod(mload(0xf00), 21888241567198334088790460357988866238279339518792980768180410072331574733841, f_q))
mstore(0xf40, mulmod(mload(0xf20), 12929131318670223636853686797196826072950305380535537217467769528748593133487, f_q))
mstore(0xf60, addmod(mload(0x740), 8959111553169051585392718948060449015598059019880497126230434657827215362130, f_q))
mstore(0xf80, mulmod(mload(0xf20), 14655294445420895451632927078981340937842238432098198055057679026789553137428, f_q))
mstore(0xfa0, addmod(mload(0x740), 7232948426418379770613478666275934150706125968317836288640525159786255358189, f_q))
mstore(0xfc0, mulmod(mload(0xf20), 12220484078924208264862893648548198807365556694478604924193442790112568454894, f_q))
mstore(0xfe0, addmod(mload(0x740), 9667758792915066957383512096709076281182807705937429419504761396463240040723, f_q))
mstore(0x1000, mulmod(mload(0xf20), 8734126352828345679573237859165904705806588461301144420590422589042130041188, f_q))
mstore(0x1020, addmod(mload(0x740), 13154116519010929542673167886091370382741775939114889923107781597533678454429, f_q))
mstore(0x1040, mulmod(mload(0xf20), 7358966525675286471217089135633860168646304224547606326237275077574224349359, f_q))
mstore(0x1060, addmod(mload(0x740), 14529276346163988751029316609623414919902060175868428017460929109001584146258, f_q))
mstore(0x1080, mulmod(mload(0xf20), 9741553891420464328295280489650144566903017206473301385034033384879943874347, f_q))
mstore(0x10a0, addmod(mload(0x740), 12146688980418810893951125255607130521645347193942732958664170801695864621270, f_q))
mstore(0x10c0, mulmod(mload(0xf20), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
mstore(0x10e0, addmod(mload(0x740), 4558794634599160729665540001169218674296628713450539706539395399156027320107, f_q))
mstore(0x1100, mulmod(mload(0xf20), 1, f_q))
mstore(0x1120, addmod(mload(0x740), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x1140, mulmod(mload(0xf20), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
mstore(0x1160, addmod(mload(0x740), 10436837293141318478790164891277058815157809665667237910671663755188835910966, f_q))
mstore(0x1180, mulmod(mload(0xf20), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
mstore(0x11a0, addmod(mload(0x740), 13513867906530865119835332133273263211836799082674232843258448413103731898270, f_q))
mstore(0x11c0, mulmod(mload(0xf20), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
mstore(0x11e0, addmod(mload(0x740), 397435866944165296105265499114012685257684941273893521957278993950622991095, f_q))
mstore(0x1200, mulmod(mload(0xf20), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
mstore(0x1220, addmod(mload(0x740), 10676941854703594198666993839846402519342119846958189386823924046696287912227, f_q))
mstore(0x1240, mulmod(mload(0xf20), 18846108080730935585192484934247867403156699586319724728525857970312957475341, f_q))
mstore(0x1260, addmod(mload(0x740), 3042134791108339637053920811009407685391664814096309615172346216262851020276, f_q))
mstore(0x1280, mulmod(mload(0xf20), 3615478808282855240548287271348143516886772452944084747768312988864436725401, f_q))
mstore(0x12a0, addmod(mload(0x740), 18272764063556419981698118473909131571661591947471949595929891197711371770216, f_q))
mstore(0x12c0, mulmod(mload(0xf20), 21451937155080765789602997556105366785934335730087568134349216848800867145453, f_q))
mstore(0x12e0, addmod(mload(0x740), 436305716758509432643408189151908302614028670328466209348987337774941350164, f_q))
mstore(0x1300, mulmod(mload(0xf20), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))
mstore(0x1320, addmod(mload(0x740), 20461838439117790833741043996939313553025008529160428886800406442142042007110, f_q))
mstore(0x1340, mulmod(mload(0xf20), 13982290267294411190096162596630216412723378687553046594730793425118513274800, f_q))
mstore(0x1360, addmod(mload(0x740), 7905952604544864032150243148627058675824985712862987748967410761457295220817, f_q))
mstore(0x1380, mulmod(mload(0xf20), 216092043779272773661818549620449970334216366264741118684015851799902419467, f_q))
mstore(0x13a0, addmod(mload(0x740), 21672150828060002448584587195636825118214148034151293225014188334775906076150, f_q))
mstore(0x13c0, mulmod(mload(0xf20), 9537783784440837896026284659246718978615447564543116209283382057778110278482, f_q))
mstore(0x13e0, addmod(mload(0x740), 12350459087398437326220121086010556109932916835872918134414822128797698217135, f_q))
mstore(0x1400, mulmod(mload(0xf20), 12619617507853212586156872920672483948819476989779550311307282715684870266992, f_q))
mstore(0x1420, addmod(mload(0x740), 9268625363986062636089532824584791139728887410636484032390921470890938228625, f_q))
mstore(0x1440, mulmod(mload(0xf20), 3947443723575973965644279767310964219908423994086470065513888332899718123222, f_q))
mstore(0x1460, addmod(mload(0x740), 17940799148263301256602125977946310868639940406329564278184315853676090372395, f_q))
mstore(0x1480, mulmod(mload(0xf20), 18610195890048912503953886742825279624920778288956610528523679659246523534888, f_q))
mstore(0x14a0, addmod(mload(0x740), 3278046981790362718292519002431995463627586111459423815174524527329284960729, f_q))
mstore(0x14c0, mulmod(mload(0xf20), 1539082509056298927655194235755440186888826897239928178265486731666142403222, f_q))
mstore(0x14e0, addmod(mload(0x740), 20349160362782976294591211509501834901659537503176106165432717454909666092395, f_q))
mstore(0x1500, mulmod(mload(0xf20), 19032961837237948602743626455740240236231119053033140765040043513661803148152, f_q))
mstore(0x1520, addmod(mload(0x740), 2855281034601326619502779289517034852317245347382893578658160672914005347465, f_q))
mstore(0x1540, mulmod(mload(0xf20), 4317410353320599552056040796202302907960891408523818766419977508859423800635, f_q))
mstore(0x1560, addmod(mload(0x740), 17570832518518675670190364949054972180587472991892215577278226677716384694982, f_q))
mstore(0x1580, mulmod(mload(0xf20), 14875928112196239563830800280253496262679717528621719058794366823499719730250, f_q))
mstore(0x15a0, addmod(mload(0x740), 7012314759643035658415605465003778825868646871794315284903837363076088765367, f_q))
mstore(0x15c0, mulmod(mload(0xf20), 2366023502186770334390939928726871658997402416352868340984630739442624219298, f_q))
mstore(0x15e0, addmod(mload(0x740), 19522219369652504887855465816530403429550961984063166002713573447133184276319, f_q))
mstore(0x1600, mulmod(mload(0xf20), 915149353520972163646494413843788069594022902357002628455555785223409501882, f_q))
mstore(0x1620, addmod(mload(0x740), 20973093518318303058599911331413487018954341498059031715242648401352398993735, f_q))
mstore(0x1640, mulmod(mload(0xf20), 14391499717548074167711220639833994904150450341569029103202493919171555826079, f_q))
mstore(0x1660, addmod(mload(0x740), 7496743154291201054535185105423280184397914058847005240495710267404252669538, f_q))
mstore(0x1680, mulmod(mload(0xf20), 5522161504810533295870699551020523636289972223872138525048055197429246400245, f_q))
mstore(0x16a0, addmod(mload(0x740), 16366081367028741926375706194236751452258392176543895818650148989146562095372, f_q))
mstore(0x16c0, mulmod(mload(0xf20), 10119780362642123194334092174270235809557798114544683654677907882314807212354, f_q))
mstore(0x16e0, addmod(mload(0x740), 11768462509197152027912313570987039278990566285871350689020296304261001283263, f_q))
{
            let prod := mload(0xf60)

                prod := mulmod(mload(0xfa0), prod, f_q)
                mstore(0x1700, prod)
            
                prod := mulmod(mload(0xfe0), prod, f_q)
                mstore(0x1720, prod)
            
                prod := mulmod(mload(0x1020), prod, f_q)
                mstore(0x1740, prod)
            
                prod := mulmod(mload(0x1060), prod, f_q)
                mstore(0x1760, prod)
            
                prod := mulmod(mload(0x10a0), prod, f_q)
                mstore(0x1780, prod)
            
                prod := mulmod(mload(0x10e0), prod, f_q)
                mstore(0x17a0, prod)
            
                prod := mulmod(mload(0x1120), prod, f_q)
                mstore(0x17c0, prod)
            
                prod := mulmod(mload(0x1160), prod, f_q)
                mstore(0x17e0, prod)
            
                prod := mulmod(mload(0x11a0), prod, f_q)
                mstore(0x1800, prod)
            
                prod := mulmod(mload(0x11e0), prod, f_q)
                mstore(0x1820, prod)
            
                prod := mulmod(mload(0x1220), prod, f_q)
                mstore(0x1840, prod)
            
                prod := mulmod(mload(0x1260), prod, f_q)
                mstore(0x1860, prod)
            
                prod := mulmod(mload(0x12a0), prod, f_q)
                mstore(0x1880, prod)
            
                prod := mulmod(mload(0x12e0), prod, f_q)
                mstore(0x18a0, prod)
            
                prod := mulmod(mload(0x1320), prod, f_q)
                mstore(0x18c0, prod)
            
                prod := mulmod(mload(0x1360), prod, f_q)
                mstore(0x18e0, prod)
            
                prod := mulmod(mload(0x13a0), prod, f_q)
                mstore(0x1900, prod)
            
                prod := mulmod(mload(0x13e0), prod, f_q)
                mstore(0x1920, prod)
            
                prod := mulmod(mload(0x1420), prod, f_q)
                mstore(0x1940, prod)
            
                prod := mulmod(mload(0x1460), prod, f_q)
                mstore(0x1960, prod)
            
                prod := mulmod(mload(0x14a0), prod, f_q)
                mstore(0x1980, prod)
            
                prod := mulmod(mload(0x14e0), prod, f_q)
                mstore(0x19a0, prod)
            
                prod := mulmod(mload(0x1520), prod, f_q)
                mstore(0x19c0, prod)
            
                prod := mulmod(mload(0x1560), prod, f_q)
                mstore(0x19e0, prod)
            
                prod := mulmod(mload(0x15a0), prod, f_q)
                mstore(0x1a00, prod)
            
                prod := mulmod(mload(0x15e0), prod, f_q)
                mstore(0x1a20, prod)
            
                prod := mulmod(mload(0x1620), prod, f_q)
                mstore(0x1a40, prod)
            
                prod := mulmod(mload(0x1660), prod, f_q)
                mstore(0x1a60, prod)
            
                prod := mulmod(mload(0x16a0), prod, f_q)
                mstore(0x1a80, prod)
            
                prod := mulmod(mload(0x16e0), prod, f_q)
                mstore(0x1aa0, prod)
            
                prod := mulmod(mload(0xf00), prod, f_q)
                mstore(0x1ac0, prod)
            
        }
mstore(0x1b00, 32)
mstore(0x1b20, 32)
mstore(0x1b40, 32)
mstore(0x1b60, mload(0x1ac0))
mstore(0x1b80, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x1ba0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x1b00, 0xc0, 0x1ae0, 0x20), 1), success)
{
            
            let inv := mload(0x1ae0)
            let v
        
                    v := mload(0xf00)
                    mstore(3840, mulmod(mload(0x1aa0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x16e0)
                    mstore(5856, mulmod(mload(0x1a80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x16a0)
                    mstore(5792, mulmod(mload(0x1a60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1660)
                    mstore(5728, mulmod(mload(0x1a40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1620)
                    mstore(5664, mulmod(mload(0x1a20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x15e0)
                    mstore(5600, mulmod(mload(0x1a00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x15a0)
                    mstore(5536, mulmod(mload(0x19e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1560)
                    mstore(5472, mulmod(mload(0x19c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1520)
                    mstore(5408, mulmod(mload(0x19a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x14e0)
                    mstore(5344, mulmod(mload(0x1980), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x14a0)
                    mstore(5280, mulmod(mload(0x1960), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1460)
                    mstore(5216, mulmod(mload(0x1940), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1420)
                    mstore(5152, mulmod(mload(0x1920), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x13e0)
                    mstore(5088, mulmod(mload(0x1900), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x13a0)
                    mstore(5024, mulmod(mload(0x18e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1360)
                    mstore(4960, mulmod(mload(0x18c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1320)
                    mstore(4896, mulmod(mload(0x18a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x12e0)
                    mstore(4832, mulmod(mload(0x1880), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x12a0)
                    mstore(4768, mulmod(mload(0x1860), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1260)
                    mstore(4704, mulmod(mload(0x1840), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1220)
                    mstore(4640, mulmod(mload(0x1820), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x11e0)
                    mstore(4576, mulmod(mload(0x1800), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x11a0)
                    mstore(4512, mulmod(mload(0x17e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1160)
                    mstore(4448, mulmod(mload(0x17c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1120)
                    mstore(4384, mulmod(mload(0x17a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x10e0)
                    mstore(4320, mulmod(mload(0x1780), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x10a0)
                    mstore(4256, mulmod(mload(0x1760), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1060)
                    mstore(4192, mulmod(mload(0x1740), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1020)
                    mstore(4128, mulmod(mload(0x1720), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xfe0)
                    mstore(4064, mulmod(mload(0x1700), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xfa0)
                    mstore(4000, mulmod(mload(0xf60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0xf60, inv)

        }
mstore(0x1bc0, mulmod(mload(0xf40), mload(0xf60), f_q))
mstore(0x1be0, mulmod(mload(0xf80), mload(0xfa0), f_q))
mstore(0x1c00, mulmod(mload(0xfc0), mload(0xfe0), f_q))
mstore(0x1c20, mulmod(mload(0x1000), mload(0x1020), f_q))
mstore(0x1c40, mulmod(mload(0x1040), mload(0x1060), f_q))
mstore(0x1c60, mulmod(mload(0x1080), mload(0x10a0), f_q))
mstore(0x1c80, mulmod(mload(0x10c0), mload(0x10e0), f_q))
mstore(0x1ca0, mulmod(mload(0x1100), mload(0x1120), f_q))
mstore(0x1cc0, mulmod(mload(0x1140), mload(0x1160), f_q))
mstore(0x1ce0, mulmod(mload(0x1180), mload(0x11a0), f_q))
mstore(0x1d00, mulmod(mload(0x11c0), mload(0x11e0), f_q))
mstore(0x1d20, mulmod(mload(0x1200), mload(0x1220), f_q))
mstore(0x1d40, mulmod(mload(0x1240), mload(0x1260), f_q))
mstore(0x1d60, mulmod(mload(0x1280), mload(0x12a0), f_q))
mstore(0x1d80, mulmod(mload(0x12c0), mload(0x12e0), f_q))
mstore(0x1da0, mulmod(mload(0x1300), mload(0x1320), f_q))
mstore(0x1dc0, mulmod(mload(0x1340), mload(0x1360), f_q))
mstore(0x1de0, mulmod(mload(0x1380), mload(0x13a0), f_q))
mstore(0x1e00, mulmod(mload(0x13c0), mload(0x13e0), f_q))
mstore(0x1e20, mulmod(mload(0x1400), mload(0x1420), f_q))
mstore(0x1e40, mulmod(mload(0x1440), mload(0x1460), f_q))
mstore(0x1e60, mulmod(mload(0x1480), mload(0x14a0), f_q))
mstore(0x1e80, mulmod(mload(0x14c0), mload(0x14e0), f_q))
mstore(0x1ea0, mulmod(mload(0x1500), mload(0x1520), f_q))
mstore(0x1ec0, mulmod(mload(0x1540), mload(0x1560), f_q))
mstore(0x1ee0, mulmod(mload(0x1580), mload(0x15a0), f_q))
mstore(0x1f00, mulmod(mload(0x15c0), mload(0x15e0), f_q))
mstore(0x1f20, mulmod(mload(0x1600), mload(0x1620), f_q))
mstore(0x1f40, mulmod(mload(0x1640), mload(0x1660), f_q))
mstore(0x1f60, mulmod(mload(0x1680), mload(0x16a0), f_q))
mstore(0x1f80, mulmod(mload(0x16c0), mload(0x16e0), f_q))
{
            let result := mulmod(mload(0x1ca0), mload(0x20), f_q)
result := addmod(mulmod(mload(0x1cc0), mload(0x40), f_q), result, f_q)
result := addmod(mulmod(mload(0x1ce0), mload(0x60), f_q), result, f_q)
result := addmod(mulmod(mload(0x1d00), mload(0x80), f_q), result, f_q)
result := addmod(mulmod(mload(0x1d20), mload(0xa0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1d40), mload(0xc0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1d60), mload(0xe0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1d80), mload(0x100), f_q), result, f_q)
result := addmod(mulmod(mload(0x1da0), mload(0x120), f_q), result, f_q)
result := addmod(mulmod(mload(0x1dc0), mload(0x140), f_q), result, f_q)
result := addmod(mulmod(mload(0x1de0), mload(0x160), f_q), result, f_q)
result := addmod(mulmod(mload(0x1e00), mload(0x180), f_q), result, f_q)
result := addmod(mulmod(mload(0x1e20), mload(0x1a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1e40), mload(0x1c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1e60), mload(0x1e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1e80), mload(0x200), f_q), result, f_q)
result := addmod(mulmod(mload(0x1ea0), mload(0x220), f_q), result, f_q)
result := addmod(mulmod(mload(0x1ec0), mload(0x240), f_q), result, f_q)
result := addmod(mulmod(mload(0x1ee0), mload(0x260), f_q), result, f_q)
result := addmod(mulmod(mload(0x1f00), mload(0x280), f_q), result, f_q)
result := addmod(mulmod(mload(0x1f20), mload(0x2a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1f40), mload(0x2c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1f60), mload(0x2e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1f80), mload(0x300), f_q), result, f_q)
mstore(8096, result)
        }
mstore(0x1fc0, mulmod(mload(0x7c0), mload(0x7a0), f_q))
mstore(0x1fe0, addmod(mload(0x780), mload(0x1fc0), f_q))
mstore(0x2000, addmod(mload(0x1fe0), sub(f_q, mload(0x7e0)), f_q))
mstore(0x2020, mulmod(mload(0x2000), mload(0x860), f_q))
mstore(0x2040, mulmod(mload(0x5e0), mload(0x2020), f_q))
mstore(0x2060, addmod(1, sub(f_q, mload(0x900)), f_q))
mstore(0x2080, mulmod(mload(0x2060), mload(0x1ca0), f_q))
mstore(0x20a0, addmod(mload(0x2040), mload(0x2080), f_q))
mstore(0x20c0, mulmod(mload(0x5e0), mload(0x20a0), f_q))
mstore(0x20e0, mulmod(mload(0x900), mload(0x900), f_q))
mstore(0x2100, addmod(mload(0x20e0), sub(f_q, mload(0x900)), f_q))
mstore(0x2120, mulmod(mload(0x2100), mload(0x1bc0), f_q))
mstore(0x2140, addmod(mload(0x20c0), mload(0x2120), f_q))
mstore(0x2160, mulmod(mload(0x5e0), mload(0x2140), f_q))
mstore(0x2180, addmod(1, sub(f_q, mload(0x1bc0)), f_q))
mstore(0x21a0, addmod(mload(0x1be0), mload(0x1c00), f_q))
mstore(0x21c0, addmod(mload(0x21a0), mload(0x1c20), f_q))
mstore(0x21e0, addmod(mload(0x21c0), mload(0x1c40), f_q))
mstore(0x2200, addmod(mload(0x21e0), mload(0x1c60), f_q))
mstore(0x2220, addmod(mload(0x2200), mload(0x1c80), f_q))
mstore(0x2240, addmod(mload(0x2180), sub(f_q, mload(0x2220)), f_q))
mstore(0x2260, mulmod(mload(0x8a0), mload(0x460), f_q))
mstore(0x2280, addmod(mload(0x800), mload(0x2260), f_q))
mstore(0x22a0, addmod(mload(0x2280), mload(0x4c0), f_q))
mstore(0x22c0, mulmod(mload(0x8c0), mload(0x460), f_q))
mstore(0x22e0, addmod(mload(0x780), mload(0x22c0), f_q))
mstore(0x2300, addmod(mload(0x22e0), mload(0x4c0), f_q))
mstore(0x2320, mulmod(mload(0x2300), mload(0x22a0), f_q))
mstore(0x2340, mulmod(mload(0x8e0), mload(0x460), f_q))
mstore(0x2360, addmod(mload(0x1fa0), mload(0x2340), f_q))
mstore(0x2380, addmod(mload(0x2360), mload(0x4c0), f_q))
mstore(0x23a0, mulmod(mload(0x2380), mload(0x2320), f_q))
mstore(0x23c0, mulmod(mload(0x23a0), mload(0x920), f_q))
mstore(0x23e0, mulmod(1, mload(0x460), f_q))
mstore(0x2400, mulmod(mload(0x740), mload(0x23e0), f_q))
mstore(0x2420, addmod(mload(0x800), mload(0x2400), f_q))
mstore(0x2440, addmod(mload(0x2420), mload(0x4c0), f_q))
mstore(0x2460, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x460), f_q))
mstore(0x2480, mulmod(mload(0x740), mload(0x2460), f_q))
mstore(0x24a0, addmod(mload(0x780), mload(0x2480), f_q))
mstore(0x24c0, addmod(mload(0x24a0), mload(0x4c0), f_q))
mstore(0x24e0, mulmod(mload(0x24c0), mload(0x2440), f_q))
mstore(0x2500, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x460), f_q))
mstore(0x2520, mulmod(mload(0x740), mload(0x2500), f_q))
mstore(0x2540, addmod(mload(0x1fa0), mload(0x2520), f_q))
mstore(0x2560, addmod(mload(0x2540), mload(0x4c0), f_q))
mstore(0x2580, mulmod(mload(0x2560), mload(0x24e0), f_q))
mstore(0x25a0, mulmod(mload(0x2580), mload(0x900), f_q))
mstore(0x25c0, addmod(mload(0x23c0), sub(f_q, mload(0x25a0)), f_q))
mstore(0x25e0, mulmod(mload(0x25c0), mload(0x2240), f_q))
mstore(0x2600, addmod(mload(0x2160), mload(0x25e0), f_q))
mstore(0x2620, mulmod(mload(0x5e0), mload(0x2600), f_q))
mstore(0x2640, addmod(1, sub(f_q, mload(0x940)), f_q))
mstore(0x2660, mulmod(mload(0x2640), mload(0x1ca0), f_q))
mstore(0x2680, addmod(mload(0x2620), mload(0x2660), f_q))
mstore(0x26a0, mulmod(mload(0x5e0), mload(0x2680), f_q))
mstore(0x26c0, mulmod(mload(0x940), mload(0x940), f_q))
mstore(0x26e0, addmod(mload(0x26c0), sub(f_q, mload(0x940)), f_q))
mstore(0x2700, mulmod(mload(0x26e0), mload(0x1bc0), f_q))
mstore(0x2720, addmod(mload(0x26a0), mload(0x2700), f_q))
mstore(0x2740, mulmod(mload(0x5e0), mload(0x2720), f_q))
mstore(0x2760, addmod(mload(0x980), mload(0x460), f_q))
mstore(0x2780, mulmod(mload(0x2760), mload(0x960), f_q))
mstore(0x27a0, addmod(mload(0x9c0), mload(0x4c0), f_q))
mstore(0x27c0, mulmod(mload(0x27a0), mload(0x2780), f_q))
mstore(0x27e0, mulmod(mload(0x780), mload(0x840), f_q))
mstore(0x2800, addmod(mload(0x27e0), mload(0x460), f_q))
mstore(0x2820, mulmod(mload(0x2800), mload(0x940), f_q))
mstore(0x2840, addmod(mload(0x820), mload(0x4c0), f_q))
mstore(0x2860, mulmod(mload(0x2840), mload(0x2820), f_q))
mstore(0x2880, addmod(mload(0x27c0), sub(f_q, mload(0x2860)), f_q))
mstore(0x28a0, mulmod(mload(0x2880), mload(0x2240), f_q))
mstore(0x28c0, addmod(mload(0x2740), mload(0x28a0), f_q))
mstore(0x28e0, mulmod(mload(0x5e0), mload(0x28c0), f_q))
mstore(0x2900, addmod(mload(0x980), sub(f_q, mload(0x9c0)), f_q))
mstore(0x2920, mulmod(mload(0x2900), mload(0x1ca0), f_q))
mstore(0x2940, addmod(mload(0x28e0), mload(0x2920), f_q))
mstore(0x2960, mulmod(mload(0x5e0), mload(0x2940), f_q))
mstore(0x2980, mulmod(mload(0x2900), mload(0x2240), f_q))
mstore(0x29a0, addmod(mload(0x980), sub(f_q, mload(0x9a0)), f_q))
mstore(0x29c0, mulmod(mload(0x29a0), mload(0x2980), f_q))
mstore(0x29e0, addmod(mload(0x2960), mload(0x29c0), f_q))
mstore(0x2a00, mulmod(mload(0xee0), mload(0xee0), f_q))
mstore(0x2a20, mulmod(mload(0x2a00), mload(0xee0), f_q))
mstore(0x2a40, mulmod(mload(0x2a20), mload(0xee0), f_q))
mstore(0x2a60, mulmod(1, mload(0xee0), f_q))
mstore(0x2a80, mulmod(1, mload(0x2a00), f_q))
mstore(0x2aa0, mulmod(1, mload(0x2a20), f_q))
mstore(0x2ac0, mulmod(mload(0x29e0), mload(0xf00), f_q))
mstore(0x2ae0, mulmod(mload(0xc00), mload(0x740), f_q))
mstore(0x2b00, mulmod(mload(0x2ae0), mload(0x740), f_q))
mstore(0x2b20, mulmod(mload(0x740), 1, f_q))
mstore(0x2b40, addmod(mload(0xb00), sub(f_q, mload(0x2b20)), f_q))
mstore(0x2b60, mulmod(mload(0x740), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
mstore(0x2b80, addmod(mload(0xb00), sub(f_q, mload(0x2b60)), f_q))
mstore(0x2ba0, mulmod(mload(0x740), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
mstore(0x2bc0, addmod(mload(0xb00), sub(f_q, mload(0x2ba0)), f_q))
mstore(0x2be0, mulmod(mload(0x740), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
mstore(0x2c00, addmod(mload(0xb00), sub(f_q, mload(0x2be0)), f_q))
mstore(0x2c20, mulmod(mload(0x740), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
mstore(0x2c40, addmod(mload(0xb00), sub(f_q, mload(0x2c20)), f_q))
{
            let result := mulmod(mload(0xb00), mulmod(mload(0x2ae0), 6616149745577394522356295102346368305374051634342887004165528916468992151333, f_q), f_q)
result := addmod(mulmod(mload(0x740), mulmod(mload(0x2ae0), 15272093126261880699890110642910906783174312766073147339532675270106816344284, f_q), f_q), result, f_q)
mstore(11360, result)
        }
{
            let result := mulmod(mload(0xb00), mulmod(mload(0x2ae0), 530501691302793820034524283154921640443166880847115433758691660016816186416, f_q), f_q)
result := addmod(mulmod(mload(0x740), mulmod(mload(0x2ae0), 6735468303947967792722299167169712601265763928443086612877978228369959138708, f_q), f_q), result, f_q)
mstore(11392, result)
        }
{
            let result := mulmod(mload(0xb00), mulmod(mload(0x2ae0), 6735468303947967792722299167169712601265763928443086612877978228369959138708, f_q), f_q)
result := addmod(mulmod(mload(0x740), mulmod(mload(0x2ae0), 21402573809525492531235934453699988060841876665026314791644170130242704768864, f_q), f_q), result, f_q)
mstore(11424, result)
        }
{
            let result := mulmod(mload(0xb00), mulmod(mload(0x2ae0), 21558793644302942916864965630979640748886316167261336210841195936026980690666, f_q), f_q)
result := addmod(mulmod(mload(0x740), mulmod(mload(0x2ae0), 21647881284526053590463969745634050372655996593461286860577821962674562513632, f_q), f_q), result, f_q)
mstore(11456, result)
        }
mstore(0x2ce0, mulmod(1, mload(0x2b40), f_q))
mstore(0x2d00, mulmod(mload(0x2ce0), mload(0x2bc0), f_q))
mstore(0x2d20, mulmod(mload(0x2d00), mload(0x2b80), f_q))
mstore(0x2d40, mulmod(mload(0x2d20), mload(0x2c40), f_q))
{
            let result := mulmod(mload(0xb00), mulmod(mload(0x740), 10436837293141318478790164891277058815157809665667237910671663755188835910967, f_q), f_q)
result := addmod(mulmod(mload(0x740), mulmod(mload(0x740), 11451405578697956743456240853980216273390554734748796433026540431386972584650, f_q), f_q), result, f_q)
mstore(11616, result)
        }
{
            let result := mulmod(mload(0xb00), mulmod(mload(0x740), 11451405578697956743456240853980216273390554734748796433026540431386972584650, f_q), f_q)
result := addmod(mulmod(mload(0x740), mulmod(mload(0x740), 3077030613389546641045167241996204396678989417006994932586784657914895987304, f_q), f_q), result, f_q)
mstore(11648, result)
        }
{
            let result := mulmod(mload(0xb00), mulmod(mload(0x740), 4558794634599160729665540001169218674296628713450539706539395399156027320108, f_q), f_q)
result := addmod(mulmod(mload(0x740), mulmod(mload(0x740), 17329448237240114492580865744088056414251735686965494637158808787419781175509, f_q), f_q), result, f_q)
mstore(11680, result)
        }
{
            let result := mulmod(mload(0xb00), mulmod(mload(0x740), 17329448237240114492580865744088056414251735686965494637158808787419781175509, f_q), f_q)
result := addmod(mulmod(mload(0x740), mulmod(mload(0x740), 7587894345819650164285585254437911847348718480492193252124775402539837301163, f_q), f_q), result, f_q)
mstore(11712, result)
        }
mstore(0x2de0, mulmod(mload(0x2ce0), mload(0x2c00), f_q))
{
            let result := mulmod(mload(0xb00), 1, f_q)
result := addmod(mulmod(mload(0x740), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)
mstore(11776, result)
        }
{
            let prod := mload(0x2c60)

                prod := mulmod(mload(0x2c80), prod, f_q)
                mstore(0x2e20, prod)
            
                prod := mulmod(mload(0x2ca0), prod, f_q)
                mstore(0x2e40, prod)
            
                prod := mulmod(mload(0x2cc0), prod, f_q)
                mstore(0x2e60, prod)
            
                prod := mulmod(mload(0x2d60), prod, f_q)
                mstore(0x2e80, prod)
            
                prod := mulmod(mload(0x2d80), prod, f_q)
                mstore(0x2ea0, prod)
            
                prod := mulmod(mload(0x2d00), prod, f_q)
                mstore(0x2ec0, prod)
            
                prod := mulmod(mload(0x2da0), prod, f_q)
                mstore(0x2ee0, prod)
            
                prod := mulmod(mload(0x2dc0), prod, f_q)
                mstore(0x2f00, prod)
            
                prod := mulmod(mload(0x2de0), prod, f_q)
                mstore(0x2f20, prod)
            
                prod := mulmod(mload(0x2e00), prod, f_q)
                mstore(0x2f40, prod)
            
                prod := mulmod(mload(0x2ce0), prod, f_q)
                mstore(0x2f60, prod)
            
        }
mstore(0x2fa0, 32)
mstore(0x2fc0, 32)
mstore(0x2fe0, 32)
mstore(0x3000, mload(0x2f60))
mstore(0x3020, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x3040, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x2fa0, 0xc0, 0x2f80, 0x20), 1), success)
{
            
            let inv := mload(0x2f80)
            let v
        
                    v := mload(0x2ce0)
                    mstore(11488, mulmod(mload(0x2f40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2e00)
                    mstore(11776, mulmod(mload(0x2f20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2de0)
                    mstore(11744, mulmod(mload(0x2f00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2dc0)
                    mstore(11712, mulmod(mload(0x2ee0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2da0)
                    mstore(11680, mulmod(mload(0x2ec0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2d00)
                    mstore(11520, mulmod(mload(0x2ea0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2d80)
                    mstore(11648, mulmod(mload(0x2e80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2d60)
                    mstore(11616, mulmod(mload(0x2e60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2cc0)
                    mstore(11456, mulmod(mload(0x2e40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2ca0)
                    mstore(11424, mulmod(mload(0x2e20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2c80)
                    mstore(11392, mulmod(mload(0x2c60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x2c60, inv)

        }
{
            let result := mload(0x2c60)
result := addmod(mload(0x2c80), result, f_q)
result := addmod(mload(0x2ca0), result, f_q)
result := addmod(mload(0x2cc0), result, f_q)
mstore(12384, result)
        }
mstore(0x3080, mulmod(mload(0x2d40), mload(0x2d00), f_q))
{
            let result := mload(0x2d60)
result := addmod(mload(0x2d80), result, f_q)
mstore(12448, result)
        }
mstore(0x30c0, mulmod(mload(0x2d40), mload(0x2de0), f_q))
{
            let result := mload(0x2da0)
result := addmod(mload(0x2dc0), result, f_q)
mstore(12512, result)
        }
mstore(0x3100, mulmod(mload(0x2d40), mload(0x2ce0), f_q))
{
            let result := mload(0x2e00)
mstore(12576, result)
        }
{
            let prod := mload(0x3060)

                prod := mulmod(mload(0x30a0), prod, f_q)
                mstore(0x3140, prod)
            
                prod := mulmod(mload(0x30e0), prod, f_q)
                mstore(0x3160, prod)
            
                prod := mulmod(mload(0x3120), prod, f_q)
                mstore(0x3180, prod)
            
        }
mstore(0x31c0, 32)
mstore(0x31e0, 32)
mstore(0x3200, 32)
mstore(0x3220, mload(0x3180))
mstore(0x3240, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x3260, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x31c0, 0xc0, 0x31a0, 0x20), 1), success)
{
            
            let inv := mload(0x31a0)
            let v
        
                    v := mload(0x3120)
                    mstore(12576, mulmod(mload(0x3160), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x30e0)
                    mstore(12512, mulmod(mload(0x3140), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x30a0)
                    mstore(12448, mulmod(mload(0x3060), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x3060, inv)

        }
mstore(0x3280, mulmod(mload(0x3080), mload(0x30a0), f_q))
mstore(0x32a0, mulmod(mload(0x30c0), mload(0x30e0), f_q))
mstore(0x32c0, mulmod(mload(0x3100), mload(0x3120), f_q))
mstore(0x32e0, mulmod(mload(0xa00), mload(0xa00), f_q))
mstore(0x3300, mulmod(mload(0x32e0), mload(0xa00), f_q))
mstore(0x3320, mulmod(mload(0x3300), mload(0xa00), f_q))
mstore(0x3340, mulmod(mload(0x3320), mload(0xa00), f_q))
mstore(0x3360, mulmod(mload(0x3340), mload(0xa00), f_q))
mstore(0x3380, mulmod(mload(0x3360), mload(0xa00), f_q))
mstore(0x33a0, mulmod(mload(0x3380), mload(0xa00), f_q))
mstore(0x33c0, mulmod(mload(0x33a0), mload(0xa00), f_q))
mstore(0x33e0, mulmod(mload(0x33c0), mload(0xa00), f_q))
mstore(0x3400, mulmod(mload(0xa60), mload(0xa60), f_q))
mstore(0x3420, mulmod(mload(0x3400), mload(0xa60), f_q))
mstore(0x3440, mulmod(mload(0x3420), mload(0xa60), f_q))
{
            let result := mulmod(mload(0x780), mload(0x2c60), f_q)
result := addmod(mulmod(mload(0x7a0), mload(0x2c80), f_q), result, f_q)
result := addmod(mulmod(mload(0x7c0), mload(0x2ca0), f_q), result, f_q)
result := addmod(mulmod(mload(0x7e0), mload(0x2cc0), f_q), result, f_q)
mstore(13408, result)
        }
mstore(0x3480, mulmod(mload(0x3460), mload(0x3060), f_q))
mstore(0x34a0, mulmod(sub(f_q, mload(0x3480)), 1, f_q))
mstore(0x34c0, mulmod(mload(0x34a0), 1, f_q))
mstore(0x34e0, mulmod(1, mload(0x3080), f_q))
{
            let result := mulmod(mload(0x900), mload(0x2d60), f_q)
result := addmod(mulmod(mload(0x920), mload(0x2d80), f_q), result, f_q)
mstore(13568, result)
        }
mstore(0x3520, mulmod(mload(0x3500), mload(0x3280), f_q))
mstore(0x3540, mulmod(sub(f_q, mload(0x3520)), 1, f_q))
mstore(0x3560, mulmod(mload(0x34e0), 1, f_q))
{
            let result := mulmod(mload(0x940), mload(0x2d60), f_q)
result := addmod(mulmod(mload(0x960), mload(0x2d80), f_q), result, f_q)
mstore(13696, result)
        }
mstore(0x35a0, mulmod(mload(0x3580), mload(0x3280), f_q))
mstore(0x35c0, mulmod(sub(f_q, mload(0x35a0)), mload(0xa00), f_q))
mstore(0x35e0, mulmod(mload(0x34e0), mload(0xa00), f_q))
mstore(0x3600, addmod(mload(0x3540), mload(0x35c0), f_q))
mstore(0x3620, mulmod(mload(0x3600), mload(0xa60), f_q))
mstore(0x3640, mulmod(mload(0x3560), mload(0xa60), f_q))
mstore(0x3660, mulmod(mload(0x35e0), mload(0xa60), f_q))
mstore(0x3680, addmod(mload(0x34c0), mload(0x3620), f_q))
mstore(0x36a0, mulmod(1, mload(0x30c0), f_q))
{
            let result := mulmod(mload(0x980), mload(0x2da0), f_q)
result := addmod(mulmod(mload(0x9a0), mload(0x2dc0), f_q), result, f_q)
mstore(14016, result)
        }
mstore(0x36e0, mulmod(mload(0x36c0), mload(0x32a0), f_q))
mstore(0x3700, mulmod(sub(f_q, mload(0x36e0)), 1, f_q))
mstore(0x3720, mulmod(mload(0x36a0), 1, f_q))
mstore(0x3740, mulmod(mload(0x3700), mload(0x3400), f_q))
mstore(0x3760, mulmod(mload(0x3720), mload(0x3400), f_q))
mstore(0x3780, addmod(mload(0x3680), mload(0x3740), f_q))
mstore(0x37a0, mulmod(1, mload(0x3100), f_q))
{
            let result := mulmod(mload(0x9c0), mload(0x2e00), f_q)
mstore(14272, result)
        }
mstore(0x37e0, mulmod(mload(0x37c0), mload(0x32c0), f_q))
mstore(0x3800, mulmod(sub(f_q, mload(0x37e0)), 1, f_q))
mstore(0x3820, mulmod(mload(0x37a0), 1, f_q))
{
            let result := mulmod(mload(0x800), mload(0x2e00), f_q)
mstore(14400, result)
        }
mstore(0x3860, mulmod(mload(0x3840), mload(0x32c0), f_q))
mstore(0x3880, mulmod(sub(f_q, mload(0x3860)), mload(0xa00), f_q))
mstore(0x38a0, mulmod(mload(0x37a0), mload(0xa00), f_q))
mstore(0x38c0, addmod(mload(0x3800), mload(0x3880), f_q))
{
            let result := mulmod(mload(0x820), mload(0x2e00), f_q)
mstore(14560, result)
        }
mstore(0x3900, mulmod(mload(0x38e0), mload(0x32c0), f_q))
mstore(0x3920, mulmod(sub(f_q, mload(0x3900)), mload(0x32e0), f_q))
mstore(0x3940, mulmod(mload(0x37a0), mload(0x32e0), f_q))
mstore(0x3960, addmod(mload(0x38c0), mload(0x3920), f_q))
{
            let result := mulmod(mload(0x840), mload(0x2e00), f_q)
mstore(14720, result)
        }
mstore(0x39a0, mulmod(mload(0x3980), mload(0x32c0), f_q))
mstore(0x39c0, mulmod(sub(f_q, mload(0x39a0)), mload(0x3300), f_q))
mstore(0x39e0, mulmod(mload(0x37a0), mload(0x3300), f_q))
mstore(0x3a00, addmod(mload(0x3960), mload(0x39c0), f_q))
{
            let result := mulmod(mload(0x860), mload(0x2e00), f_q)
mstore(14880, result)
        }
mstore(0x3a40, mulmod(mload(0x3a20), mload(0x32c0), f_q))
mstore(0x3a60, mulmod(sub(f_q, mload(0x3a40)), mload(0x3320), f_q))
mstore(0x3a80, mulmod(mload(0x37a0), mload(0x3320), f_q))
mstore(0x3aa0, addmod(mload(0x3a00), mload(0x3a60), f_q))
{
            let result := mulmod(mload(0x8a0), mload(0x2e00), f_q)
mstore(15040, result)
        }
mstore(0x3ae0, mulmod(mload(0x3ac0), mload(0x32c0), f_q))
mstore(0x3b00, mulmod(sub(f_q, mload(0x3ae0)), mload(0x3340), f_q))
mstore(0x3b20, mulmod(mload(0x37a0), mload(0x3340), f_q))
mstore(0x3b40, addmod(mload(0x3aa0), mload(0x3b00), f_q))
{
            let result := mulmod(mload(0x8c0), mload(0x2e00), f_q)
mstore(15200, result)
        }
mstore(0x3b80, mulmod(mload(0x3b60), mload(0x32c0), f_q))
mstore(0x3ba0, mulmod(sub(f_q, mload(0x3b80)), mload(0x3360), f_q))
mstore(0x3bc0, mulmod(mload(0x37a0), mload(0x3360), f_q))
mstore(0x3be0, addmod(mload(0x3b40), mload(0x3ba0), f_q))
{
            let result := mulmod(mload(0x8e0), mload(0x2e00), f_q)
mstore(15360, result)
        }
mstore(0x3c20, mulmod(mload(0x3c00), mload(0x32c0), f_q))
mstore(0x3c40, mulmod(sub(f_q, mload(0x3c20)), mload(0x3380), f_q))
mstore(0x3c60, mulmod(mload(0x37a0), mload(0x3380), f_q))
mstore(0x3c80, addmod(mload(0x3be0), mload(0x3c40), f_q))
mstore(0x3ca0, mulmod(mload(0x2a60), mload(0x3100), f_q))
mstore(0x3cc0, mulmod(mload(0x2a80), mload(0x3100), f_q))
mstore(0x3ce0, mulmod(mload(0x2aa0), mload(0x3100), f_q))
{
            let result := mulmod(mload(0x2ac0), mload(0x2e00), f_q)
mstore(15616, result)
        }
mstore(0x3d20, mulmod(mload(0x3d00), mload(0x32c0), f_q))
mstore(0x3d40, mulmod(sub(f_q, mload(0x3d20)), mload(0x33a0), f_q))
mstore(0x3d60, mulmod(mload(0x37a0), mload(0x33a0), f_q))
mstore(0x3d80, mulmod(mload(0x3ca0), mload(0x33a0), f_q))
mstore(0x3da0, mulmod(mload(0x3cc0), mload(0x33a0), f_q))
mstore(0x3dc0, mulmod(mload(0x3ce0), mload(0x33a0), f_q))
mstore(0x3de0, addmod(mload(0x3c80), mload(0x3d40), f_q))
{
            let result := mulmod(mload(0x880), mload(0x2e00), f_q)
mstore(15872, result)
        }
mstore(0x3e20, mulmod(mload(0x3e00), mload(0x32c0), f_q))
mstore(0x3e40, mulmod(sub(f_q, mload(0x3e20)), mload(0x33c0), f_q))
mstore(0x3e60, mulmod(mload(0x37a0), mload(0x33c0), f_q))
mstore(0x3e80, addmod(mload(0x3de0), mload(0x3e40), f_q))
mstore(0x3ea0, mulmod(mload(0x3e80), mload(0x3420), f_q))
mstore(0x3ec0, mulmod(mload(0x3820), mload(0x3420), f_q))
mstore(0x3ee0, mulmod(mload(0x38a0), mload(0x3420), f_q))
mstore(0x3f00, mulmod(mload(0x3940), mload(0x3420), f_q))
mstore(0x3f20, mulmod(mload(0x39e0), mload(0x3420), f_q))
mstore(0x3f40, mulmod(mload(0x3a80), mload(0x3420), f_q))
mstore(0x3f60, mulmod(mload(0x3b20), mload(0x3420), f_q))
mstore(0x3f80, mulmod(mload(0x3bc0), mload(0x3420), f_q))
mstore(0x3fa0, mulmod(mload(0x3c60), mload(0x3420), f_q))
mstore(0x3fc0, mulmod(mload(0x3d60), mload(0x3420), f_q))
mstore(0x3fe0, mulmod(mload(0x3d80), mload(0x3420), f_q))
mstore(0x4000, mulmod(mload(0x3da0), mload(0x3420), f_q))
mstore(0x4020, mulmod(mload(0x3dc0), mload(0x3420), f_q))
mstore(0x4040, mulmod(mload(0x3e60), mload(0x3420), f_q))
mstore(0x4060, addmod(mload(0x3780), mload(0x3ea0), f_q))
mstore(0x4080, mulmod(1, mload(0x2d40), f_q))
mstore(0x40a0, mulmod(1, mload(0xb00), f_q))
mstore(0x40c0, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x40e0, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x4100, mload(0x4060))
success := and(eq(staticcall(gas(), 0x7, 0x40c0, 0x60, 0x40c0, 0x40), 1), success)
mstore(0x4120, mload(0x40c0))
                    mstore(0x4140, mload(0x40e0))
mstore(0x4160, mload(0x320))
                    mstore(0x4180, mload(0x340))
success := and(eq(staticcall(gas(), 0x6, 0x4120, 0x80, 0x4120, 0x40), 1), success)
mstore(0x41a0, mload(0x500))
                    mstore(0x41c0, mload(0x520))
mstore(0x41e0, mload(0x3640))
success := and(eq(staticcall(gas(), 0x7, 0x41a0, 0x60, 0x41a0, 0x40), 1), success)
mstore(0x4200, mload(0x4120))
                    mstore(0x4220, mload(0x4140))
mstore(0x4240, mload(0x41a0))
                    mstore(0x4260, mload(0x41c0))
success := and(eq(staticcall(gas(), 0x6, 0x4200, 0x80, 0x4200, 0x40), 1), success)
mstore(0x4280, mload(0x540))
                    mstore(0x42a0, mload(0x560))
mstore(0x42c0, mload(0x3660))
success := and(eq(staticcall(gas(), 0x7, 0x4280, 0x60, 0x4280, 0x40), 1), success)
mstore(0x42e0, mload(0x4200))
                    mstore(0x4300, mload(0x4220))
mstore(0x4320, mload(0x4280))
                    mstore(0x4340, mload(0x42a0))
success := and(eq(staticcall(gas(), 0x6, 0x42e0, 0x80, 0x42e0, 0x40), 1), success)
mstore(0x4360, mload(0x3c0))
                    mstore(0x4380, mload(0x3e0))
mstore(0x43a0, mload(0x3760))
success := and(eq(staticcall(gas(), 0x7, 0x4360, 0x60, 0x4360, 0x40), 1), success)
mstore(0x43c0, mload(0x42e0))
                    mstore(0x43e0, mload(0x4300))
mstore(0x4400, mload(0x4360))
                    mstore(0x4420, mload(0x4380))
success := and(eq(staticcall(gas(), 0x6, 0x43c0, 0x80, 0x43c0, 0x40), 1), success)
mstore(0x4440, mload(0x400))
                    mstore(0x4460, mload(0x420))
mstore(0x4480, mload(0x3ec0))
success := and(eq(staticcall(gas(), 0x7, 0x4440, 0x60, 0x4440, 0x40), 1), success)
mstore(0x44a0, mload(0x43c0))
                    mstore(0x44c0, mload(0x43e0))
mstore(0x44e0, mload(0x4440))
                    mstore(0x4500, mload(0x4460))
success := and(eq(staticcall(gas(), 0x6, 0x44a0, 0x80, 0x44a0, 0x40), 1), success)
mstore(0x4520, 0x0379ecb8073bae2a5c11c818c52653adea152026ba3adced1cef200bb3c33d21)
                    mstore(0x4540, 0x2accc60ac4a6896711ff7f01b4a6cfd7c68a7f20ce446d76bd308305e44ca1b6)
mstore(0x4560, mload(0x3ee0))
success := and(eq(staticcall(gas(), 0x7, 0x4520, 0x60, 0x4520, 0x40), 1), success)
mstore(0x4580, mload(0x44a0))
                    mstore(0x45a0, mload(0x44c0))
mstore(0x45c0, mload(0x4520))
                    mstore(0x45e0, mload(0x4540))
success := and(eq(staticcall(gas(), 0x6, 0x4580, 0x80, 0x4580, 0x40), 1), success)
mstore(0x4600, 0x125da3d762477ea5f12aa54f733d9355ca4dcd03cb9c0491923f4c97b183efdc)
                    mstore(0x4620, 0x28fe468b65375e2c5da44ba95684ad5fe474897d64cb1a1adb0b2d398d7a65f7)
mstore(0x4640, mload(0x3f00))
success := and(eq(staticcall(gas(), 0x7, 0x4600, 0x60, 0x4600, 0x40), 1), success)
mstore(0x4660, mload(0x4580))
                    mstore(0x4680, mload(0x45a0))
mstore(0x46a0, mload(0x4600))
                    mstore(0x46c0, mload(0x4620))
success := and(eq(staticcall(gas(), 0x6, 0x4660, 0x80, 0x4660, 0x40), 1), success)
mstore(0x46e0, 0x011898d23fd3c4f87a4a87464c86fb1b2887ff07e9c2744488b4c2e70c2936bc)
                    mstore(0x4700, 0x18c2a9bbd40ccf13c91722d13db9085f2963fa1e5722628dfd74c2959171df94)
mstore(0x4720, mload(0x3f20))
success := and(eq(staticcall(gas(), 0x7, 0x46e0, 0x60, 0x46e0, 0x40), 1), success)
mstore(0x4740, mload(0x4660))
                    mstore(0x4760, mload(0x4680))
mstore(0x4780, mload(0x46e0))
                    mstore(0x47a0, mload(0x4700))
success := and(eq(staticcall(gas(), 0x6, 0x4740, 0x80, 0x4740, 0x40), 1), success)
mstore(0x47c0, 0x2e29420d8ea962df05f5a8e975fdd370d24ab2beb1c0cf634786158ab28bcac9)
                    mstore(0x47e0, 0x2d04a45fd345432f281b32869b2bf6941ae884d35b80087628f735543599c1fd)
mstore(0x4800, mload(0x3f40))
success := and(eq(staticcall(gas(), 0x7, 0x47c0, 0x60, 0x47c0, 0x40), 1), success)
mstore(0x4820, mload(0x4740))
                    mstore(0x4840, mload(0x4760))
mstore(0x4860, mload(0x47c0))
                    mstore(0x4880, mload(0x47e0))
success := and(eq(staticcall(gas(), 0x6, 0x4820, 0x80, 0x4820, 0x40), 1), success)
mstore(0x48a0, 0x0bec94b782750edc3545c62f8f6af3f2560aeb4314d12e51304c42367d57127d)
                    mstore(0x48c0, 0x261594fdbd5ab9d3bb247d19a0967e637fe50e9dda6e4530c693c0aabbb03b47)
mstore(0x48e0, mload(0x3f60))
success := and(eq(staticcall(gas(), 0x7, 0x48a0, 0x60, 0x48a0, 0x40), 1), success)
mstore(0x4900, mload(0x4820))
                    mstore(0x4920, mload(0x4840))
mstore(0x4940, mload(0x48a0))
                    mstore(0x4960, mload(0x48c0))
success := and(eq(staticcall(gas(), 0x6, 0x4900, 0x80, 0x4900, 0x40), 1), success)
mstore(0x4980, 0x24b6aafd41b631a14d54255c8b08bb6efc0f988513f0c9ccfa562d8c160e289d)
                    mstore(0x49a0, 0x1a8299f899def2450d720033c04288e6d2b02e32615613751902b7ac8e7bc63b)
mstore(0x49c0, mload(0x3f80))
success := and(eq(staticcall(gas(), 0x7, 0x4980, 0x60, 0x4980, 0x40), 1), success)
mstore(0x49e0, mload(0x4900))
                    mstore(0x4a00, mload(0x4920))
mstore(0x4a20, mload(0x4980))
                    mstore(0x4a40, mload(0x49a0))
success := and(eq(staticcall(gas(), 0x6, 0x49e0, 0x80, 0x49e0, 0x40), 1), success)
mstore(0x4a60, 0x0b3cb14469c16430e735046eb1d783d731f0ee291fc9ff623c5dd9deed1bbf97)
                    mstore(0x4a80, 0x098fb3514000679c4bf9d9adfa0441c713bc3dab27b9ce08df25885ddf248399)
mstore(0x4aa0, mload(0x3fa0))
success := and(eq(staticcall(gas(), 0x7, 0x4a60, 0x60, 0x4a60, 0x40), 1), success)
mstore(0x4ac0, mload(0x49e0))
                    mstore(0x4ae0, mload(0x4a00))
mstore(0x4b00, mload(0x4a60))
                    mstore(0x4b20, mload(0x4a80))
success := and(eq(staticcall(gas(), 0x6, 0x4ac0, 0x80, 0x4ac0, 0x40), 1), success)
mstore(0x4b40, mload(0x620))
                    mstore(0x4b60, mload(0x640))
mstore(0x4b80, mload(0x3fc0))
success := and(eq(staticcall(gas(), 0x7, 0x4b40, 0x60, 0x4b40, 0x40), 1), success)
mstore(0x4ba0, mload(0x4ac0))
                    mstore(0x4bc0, mload(0x4ae0))
mstore(0x4be0, mload(0x4b40))
                    mstore(0x4c00, mload(0x4b60))
success := and(eq(staticcall(gas(), 0x6, 0x4ba0, 0x80, 0x4ba0, 0x40), 1), success)
mstore(0x4c20, mload(0x660))
                    mstore(0x4c40, mload(0x680))
mstore(0x4c60, mload(0x3fe0))
success := and(eq(staticcall(gas(), 0x7, 0x4c20, 0x60, 0x4c20, 0x40), 1), success)
mstore(0x4c80, mload(0x4ba0))
                    mstore(0x4ca0, mload(0x4bc0))
mstore(0x4cc0, mload(0x4c20))
                    mstore(0x4ce0, mload(0x4c40))
success := and(eq(staticcall(gas(), 0x6, 0x4c80, 0x80, 0x4c80, 0x40), 1), success)
mstore(0x4d00, mload(0x6a0))
                    mstore(0x4d20, mload(0x6c0))
mstore(0x4d40, mload(0x4000))
success := and(eq(staticcall(gas(), 0x7, 0x4d00, 0x60, 0x4d00, 0x40), 1), success)
mstore(0x4d60, mload(0x4c80))
                    mstore(0x4d80, mload(0x4ca0))
mstore(0x4da0, mload(0x4d00))
                    mstore(0x4dc0, mload(0x4d20))
success := and(eq(staticcall(gas(), 0x6, 0x4d60, 0x80, 0x4d60, 0x40), 1), success)
mstore(0x4de0, mload(0x6e0))
                    mstore(0x4e00, mload(0x700))
mstore(0x4e20, mload(0x4020))
success := and(eq(staticcall(gas(), 0x7, 0x4de0, 0x60, 0x4de0, 0x40), 1), success)
mstore(0x4e40, mload(0x4d60))
                    mstore(0x4e60, mload(0x4d80))
mstore(0x4e80, mload(0x4de0))
                    mstore(0x4ea0, mload(0x4e00))
success := and(eq(staticcall(gas(), 0x6, 0x4e40, 0x80, 0x4e40, 0x40), 1), success)
mstore(0x4ec0, mload(0x580))
                    mstore(0x4ee0, mload(0x5a0))
mstore(0x4f00, mload(0x4040))
success := and(eq(staticcall(gas(), 0x7, 0x4ec0, 0x60, 0x4ec0, 0x40), 1), success)
mstore(0x4f20, mload(0x4e40))
                    mstore(0x4f40, mload(0x4e60))
mstore(0x4f60, mload(0x4ec0))
                    mstore(0x4f80, mload(0x4ee0))
success := and(eq(staticcall(gas(), 0x6, 0x4f20, 0x80, 0x4f20, 0x40), 1), success)
mstore(0x4fa0, mload(0xaa0))
                    mstore(0x4fc0, mload(0xac0))
mstore(0x4fe0, sub(f_q, mload(0x4080)))
success := and(eq(staticcall(gas(), 0x7, 0x4fa0, 0x60, 0x4fa0, 0x40), 1), success)
mstore(0x5000, mload(0x4f20))
                    mstore(0x5020, mload(0x4f40))
mstore(0x5040, mload(0x4fa0))
                    mstore(0x5060, mload(0x4fc0))
success := and(eq(staticcall(gas(), 0x6, 0x5000, 0x80, 0x5000, 0x40), 1), success)
mstore(0x5080, mload(0xb40))
                    mstore(0x50a0, mload(0xb60))
mstore(0x50c0, mload(0x40a0))
success := and(eq(staticcall(gas(), 0x7, 0x5080, 0x60, 0x5080, 0x40), 1), success)
mstore(0x50e0, mload(0x5000))
                    mstore(0x5100, mload(0x5020))
mstore(0x5120, mload(0x5080))
                    mstore(0x5140, mload(0x50a0))
success := and(eq(staticcall(gas(), 0x6, 0x50e0, 0x80, 0x50e0, 0x40), 1), success)
mstore(0x5160, mload(0x50e0))
                    mstore(0x5180, mload(0x5100))
mstore(0x51a0, mload(0xb40))
                    mstore(0x51c0, mload(0xb60))
mstore(0x51e0, mload(0xb80))
                    mstore(0x5200, mload(0xba0))
mstore(0x5220, mload(0xbc0))
                    mstore(0x5240, mload(0xbe0))
mstore(0x5260, keccak256(0x5160, 256))
mstore(21120, mod(mload(21088), f_q))
mstore(0x52a0, mulmod(mload(0x5280), mload(0x5280), f_q))
mstore(0x52c0, mulmod(1, mload(0x5280), f_q))
mstore(0x52e0, mload(0x51e0))
                    mstore(0x5300, mload(0x5200))
mstore(0x5320, mload(0x52c0))
success := and(eq(staticcall(gas(), 0x7, 0x52e0, 0x60, 0x52e0, 0x40), 1), success)
mstore(0x5340, mload(0x5160))
                    mstore(0x5360, mload(0x5180))
mstore(0x5380, mload(0x52e0))
                    mstore(0x53a0, mload(0x5300))
success := and(eq(staticcall(gas(), 0x6, 0x5340, 0x80, 0x5340, 0x40), 1), success)
mstore(0x53c0, mload(0x5220))
                    mstore(0x53e0, mload(0x5240))
mstore(0x5400, mload(0x52c0))
success := and(eq(staticcall(gas(), 0x7, 0x53c0, 0x60, 0x53c0, 0x40), 1), success)
mstore(0x5420, mload(0x51a0))
                    mstore(0x5440, mload(0x51c0))
mstore(0x5460, mload(0x53c0))
                    mstore(0x5480, mload(0x53e0))
success := and(eq(staticcall(gas(), 0x6, 0x5420, 0x80, 0x5420, 0x40), 1), success)
mstore(0x54a0, mload(0x5340))
                    mstore(0x54c0, mload(0x5360))
mstore(0x54e0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x5500, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x5520, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x5540, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x5560, mload(0x5420))
                    mstore(0x5580, mload(0x5440))
mstore(0x55a0, 0x0181624e80f3d6ae28df7e01eaeab1c0e919877a3b8a6b7fbc69a6817d596ea2)
            mstore(0x55c0, 0x1783d30dcb12d259bb89098addf6280fa4b653be7a152542a28f7b926e27e648)
            mstore(0x55e0, 0x00ae44489d41a0d179e2dfdc03bddd883b7109f8b6ae316a59e815c1a6b35304)
            mstore(0x5600, 0x0b2147ab62a386bd63e6de1522109b8c9588ab466f5aadfde8c41ca3749423ee)
success := and(eq(staticcall(gas(), 0x8, 0x54a0, 0x180, 0x54a0, 0x20), 1), success)
success := and(eq(mload(0x54a0), 1), success)

            if not(success) { revert(0, 0) }
            return(0, 0)

                }
            }
        }